[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was started in my Data Visualizations Class."
  },
  {
    "objectID": "posts/Pro Soccer Analysis 2022-23 Season/index.html#introduction",
    "href": "posts/Pro Soccer Analysis 2022-23 Season/index.html#introduction",
    "title": "Pro Soccer Analysis 2022-2023 Season",
    "section": "Introduction",
    "text": "Introduction\nThis is a project to analyze the 2022-2023 season of the top 5 European soccer leagues. We will be using data from the following leagues:\n\nEnglish Premier League (England)\nLigue 1 (France)\nBundesliga (Germany)\nSerie A (Italy)\nLa Liga (Spain)\n\nThe dataset was obtained from Kaggle and contains player statistics for the 2022-2023 season. Each observation is a player and the columns contain various statistics such as goals, assists, and minutes played. There are 2,689 total observations and 124 variables. The dataset can be found here. The dataset contains 2022-2023 football player stats per 90 minutes.\nWe are looking to explore the data and answer questions about shots per game across the leagues, and across teams. We will start with some data exploration and then move on to visualizations to answer these questions.\nVariables of interest includee:\n\nPlayer: Name of the player\nNation: Nationality of the player\nPos: Position of the player\nSquad: Team the player plays for\nComp: League the player plays in\nGoals: Number of goals scored by the player\nShots: Number of shots taken by the player per 90 minutes"
  },
  {
    "objectID": "posts/Pro Soccer Analysis 2022-23 Season/index.html#data-exploration",
    "href": "posts/Pro Soccer Analysis 2022-23 Season/index.html#data-exploration",
    "title": "Pro Soccer Analysis 2022-2023 Season",
    "section": "Data Exploration",
    "text": "Data Exploration\n\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(here)\nlibrary(pander)\n# Load in the data:\nsoccer &lt;- read_delim(here(\"data/2022-2023_Football_Player_Stats.csv\"), delim = \";\")\n\n# change Almer\\xeda to Almeria\nsoccer$Player[soccer$Player == \"Almer\\xeda\"] &lt;- \"Almeria\"\n\nLook at the top ten scorers in 2022-2023 season across all leagues:\n\nsoccer %&gt;% select(Player, Nation, Pos, Squad, Comp, Goals) %&gt;%\n  arrange(desc(Goals)) %&gt;%\n  slice(1:10)\n\n# A tibble: 10 × 6\n   Player                Nation Pos   Squad           Comp           Goals\n   &lt;chr&gt;                 &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;dbl&gt;\n 1 \"Erling Haaland\"      NOR    FW    Manchester City Premier League    25\n 2 \"Harry Kane\"          ENG    FW    Tottenham       Premier League    17\n 3 \"Victor Osimhen\"      NGA    FW    Napoli          Serie A           16\n 4 \"Folarin Balogun\"     ENG    FW    Reims           Ligue 1           14\n 5 \"Wissam Ben Yedder\"   FRA    FW    Monaco          Ligue 1           14\n 6 \"Robert Lewandowski\"  POL    FW    Barcelona       La Liga           14\n 7 \"Ivan Toney\"          ENG    FW    Brentford       Premier League    14\n 8 \"Niclas F\\xfcllkrug\"  GER    FW    Werder Bremen   Bundesliga        13\n 9 \"Alexandre Lacazette\" FRA    FW    Lyon            Ligue 1           13\n10 \"Kylian Mbapp\\xe9\"    FRA    FW    Paris S-G       Ligue 1           13\n\n\nLook at the total goals scroed by each position in the 2022-2023 season:\n\nsoccer %&gt;%\n  group_by(Pos) %&gt;%\n  summarise(Total_Goals = sum(Goals)) %&gt;%\n  arrange(desc(Total_Goals)) %&gt;% pander::pander()\n\n\n\n\n\n\n\n\nPos\nTotal_Goals\n\n\n\n\nFW\n1048\n\n\nFWMF\n497\n\n\nMF\n457\n\n\nDF\n314\n\n\nMFFW\n306\n\n\nDFMF\n61\n\n\nFWDF\n36\n\n\nMFDF\n30\n\n\nDFFW\n14\n\n\nGK\n0\n\n\n\n\n\nHere note that some positions are overlapped, as FWMF includes players that play both forward and midfield, and DFFW includes players that play both defense and forward, so Total_Goals by position can be a little misleading. It is clear that plain forwards score the most goals, followed by midfielders and then defenders.\nLook at the total goals scored within each League in the 2022-2023 season:\n\nsoccer %&gt;%\n  group_by(Comp) %&gt;%\n  summarise(Total_Goals = sum(Goals)) %&gt;%\n  arrange(desc(Total_Goals)) %&gt;% pander::pander()\n\n\n\n\n\n\n\n\nComp\nTotal_Goals\n\n\n\n\nLigue 1\n618\n\n\nPremier League\n564\n\n\nBundesliga\n563\n\n\nSerie A\n538\n\n\nLa Liga\n480\n\n\n\n\n\nLigue 1 has the most total goals scored, while La Liga has the least total goals scored for this season."
  },
  {
    "objectID": "posts/Pro Soccer Analysis 2022-23 Season/index.html#visualizations",
    "href": "posts/Pro Soccer Analysis 2022-23 Season/index.html#visualizations",
    "title": "Pro Soccer Analysis 2022-2023 Season",
    "section": "Visualizations",
    "text": "Visualizations\nWe now want to look at the average number of shots for a forward or midfielder per game in the top 5 leagues. We will filter the data to only include forwards, midfielders, and players who play both positions. We will then group the data by league and calculate the mean number of shots per game. We will also calculate the standard deviation and standard error of the mean. We will then plot the data using ggplot2.\n\nsoccer %&gt;%\n  filter(Pos %in% c(\"FW\", \"MF\", \"MFFW\", \"FWMF\", \"FWDF\", \"DFFW\")) |&gt;\n  group_by(Comp) %&gt;%\n  summarize(mean_shots = mean(Shots, na.rm = TRUE),\n            sd_shots = sd(Shots, na.rm = TRUE),\n            n_players = n()) %&gt;%\n  mutate(se_shots = (sd_shots / sqrt(n_players)),\n         lb_se = mean_shots - se_shots,\n         ub_se = mean_shots + se_shots) %&gt;%\n  arrange(desc(mean_shots)) %&gt;%  # Sort by mean_shots in descending order\n  head(20) %&gt;%  # Select the top 20 players\n  mutate(Comp = fct_reorder(Comp, mean_shots)) %&gt;%  # Reverse the order of the levels of the factor\n  ggplot(aes(x = Comp, y = mean_shots)) +\n  geom_errorbar(aes(ymin = lb_se, ymax = ub_se), width = 0.2, color = \"darkred\") +\n  geom_point() +\n  geom_line(color = \"red\") +\n  labs(title = \"Shots per Game by League For Forwards and Midfielders\",\n       subtitle = \"Data taken from the 2022-2023 Season\",\n       x = \"League\",\n       y = \"Shots\") + theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  coord_flip()\n\n\n\n\nThe plot shows that Serie A has the highest average number of shots per game for forwards and midfielders, while the Bundesliga has the lowest average number of shots per game for forwards and midfielders.\nWe now want to look at the average number of shots for a forward and midfielder per game across all 5 leagues, and will display the top 20 clubs. Again, we filter the data to include only forwards, midfielders, and players who play both positions. We then group the data by league and calculate the mean number of shots per game. We will also calculate the standard deviation and standard error of the mean. We will then plot the data using ggplot2.\n\nsoccer %&gt;%\n  filter(Pos %in% c(\"FW\", \"MF\", \"MFFW\", \"FWMF\", \"FWDF\", \"DFFW\")) |&gt;\n  group_by(Squad) %&gt;%\n  summarize(mean_shots = mean(Shots, na.rm = TRUE),\n            sd_shots = sd(Shots, na.rm = TRUE),\n            n_players = n()) %&gt;%\n  mutate(se_shots = (sd_shots / sqrt(n_players)),\n         lb_se = mean_shots - se_shots,\n         ub_se = mean_shots + se_shots) %&gt;%\n  arrange(desc(mean_shots)) %&gt;%  # Sort by mean_shots in descending order\n  head(20) %&gt;%  # Select the top 20 players\n  mutate(Squad = fct_reorder(Squad, mean_shots)) %&gt;%  # Reverse the order of the levels of the factor\n  ggplot(aes(x = Squad, y = mean_shots)) +\n  geom_errorbar(aes(ymin = lb_se, ymax = ub_se), width = 0.2, color = \"darkred\") +\n  geom_point() +\n  geom_line(color = \"red\") +\n  labs(title = \"Top 20 Clubs - Shots per Game for Forwards and Midfielders\",\n       subtitle = \"Data taken from the 2022-2023 Season\",\n       x = \"Player\",\n       y = \"Shots\") + theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  coord_flip()\n\n\n\n\nThe plot shows that the club with the highest average number of shots per game for forwards and midfielders is Bayern Munich, while the club with the lowest average number of shots per game for forwards and midfielders is Sassuolo, but these include the top 20 teams with these stats, so there are a lot more teams that have a lower average number of shots per game for forwards and midfielders."
  },
  {
    "objectID": "posts/Pro Soccer Analysis 2022-23 Season/index.html#conclusion-and-wrap-up",
    "href": "posts/Pro Soccer Analysis 2022-23 Season/index.html#conclusion-and-wrap-up",
    "title": "Pro Soccer Analysis 2022-2023 Season",
    "section": "Conclusion and Wrap Up",
    "text": "Conclusion and Wrap Up\nIn this project, we looked at the top ten scorers in the 2022-2023 season across all leagues, the total goals scored by each position, and the total goals scored within each league. We then looked at the average number of shots for a forward or midfielder per game in the top 5 leagues, and displayed the top 20 clubs with the highest average number of shots per game for forwards and midfielders. We found that Serie A has the highest average number of shots per game for forwards and midfielders, while the Bundesliga has the lowest average number of shots per game for forwards and midfielders. We also found that the club with the highest average number of shots per game for forwards and midfielders is Bayern Munich, while the club with the lowest average number of shots per game for forwards and midfielders is Sassuolo. This project was a great way to practice using the dplyr and ggplot2 packages in R, and to practice data manipulation and visualization."
  },
  {
    "objectID": "posts/Pro Soccer Analysis 2022-23 Season/index.html#connection-to-class",
    "href": "posts/Pro Soccer Analysis 2022-23 Season/index.html#connection-to-class",
    "title": "Pro Soccer Analysis 2022-2023 Season",
    "section": "Connection to Class",
    "text": "Connection to Class\nIn regards to my class Data Visualization, these visualizations are effective ways of communicating information. I chose not to use all the teams when looking at the average number of shots for a forward or midfielder per game in across teams to avoid the visualization being too cluttered, and allowing the focus to be on the teams. I chose to use a red color for the points and a dark red color for the error bars to make the visualization easier to read. I also chose to use a minimal theme to make the visualization easier to read. I think these visualizations are effective ways of communicating information."
  },
  {
    "objectID": "posts/World Imports and Exports by Country/index.html",
    "href": "posts/World Imports and Exports by Country/index.html",
    "title": "World Import and Export Data",
    "section": "",
    "text": "Introduction\nI am working with some data from Kaggle on World Export & Import data. The data is from 1989 to 2021. There are 8,096 entries in the data set.\nThe data can be found here.\nI am most interested in the variables:\n\nParter Name - The country or trading partner that the data is from\nYear - The year of the data\nExport (US$ Thousand) - total value of goods and products exported by the country in thousands of US dollars\nImport (US$ Thousand) - total value of goods and products imported by the country in thousands of US dollars\n\nIt is important to note that all values of exports and imports are expressed in thousands of US dollars.\nI will be using this data to create some visualizations and to analyze the data. I am interested in exploring how exports and imports have changed over time and will look at countries with the highest exports and imports in 2021 and compare them over time. I will also create a world map that shows the percent change in exports from 2020 to 2021 for all countries in the data set.\n\n\nVisualizations\nLoad in data:\n\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(pander)\ntheme_set(theme_minimal())\nlibrary(here)\nworld_imp_exp &lt;- read_csv(here(\"data/world_import_export.csv\"))\nworld_imp_exp\n\n# A tibble: 8,096 × 33\n   `Partner Name`        Year `Export (US$ Thousand)` `Import (US$ Thousand)`\n   &lt;chr&gt;                &lt;dbl&gt;                   &lt;dbl&gt;                   &lt;dbl&gt;\n 1 Aruba                 1988                   3498.                    328.\n 2 Afghanistan           1988                 213030.                  54460.\n 3 Angola                1988                 375528.                 370703.\n 4 Anguila               1988                    367.                      4 \n 5 Albania               1988                  30104.                  47709.\n 6 Andorra               1988                  67924.                   3284.\n 7 Netherlands Antilles  1988                 104759.                  24964.\n 8 United Arab Emirates  1988                2945350.                7091824.\n 9 Argentina             1988                1136422.                1928596.\n10 Antigua and Barbuda   1988                  14407.                   2174.\n# ℹ 8,086 more rows\n# ℹ 29 more variables: `Export Product Share (%)` &lt;dbl&gt;,\n#   `Import Product Share (%)` &lt;dbl&gt;, `Revealed comparative advantage` &lt;dbl&gt;,\n#   `World Growth (%)` &lt;dbl&gt;, `Country Growth (%)` &lt;dbl&gt;,\n#   `AHS Simple Average (%)` &lt;dbl&gt;, `AHS Weighted Average (%)` &lt;dbl&gt;,\n#   `AHS Total Tariff Lines` &lt;dbl&gt;,\n#   `AHS Dutiable Tariff Lines Share (%)` &lt;dbl&gt;, …\n\n\nLet’s tidy up some of the column names and select our variables of interest.\n\nworld_imp_exp &lt;- world_imp_exp |&gt;\n  rename(Partner_Name = `Partner Name`,\n         Export_Thousand = `Export (US$ Thousand)`,\n         Import_Thousand = `Import (US$ Thousand)`) |&gt;\n  select(Partner_Name, Year, Export_Thousand, Import_Thousand)\n\nFilter the data set to find the top 5 countries with the highest exports in 2023, and compare how they have changed over time.\n\ntop_5_exp_2023 &lt;- world_imp_exp |&gt;\n  filter(Year == 2021) |&gt;\n  arrange(desc(Export_Thousand)) |&gt;\n  slice(5:7, 10, 12) |&gt;\n  select(Partner_Name, Year, Export_Thousand) |&gt;\n  mutate(Partner_Name = fct_reorder(Partner_Name, Export_Thousand))\ntop_5_exp_2023\n\n# A tibble: 5 × 3\n  Partner_Name    Year Export_Thousand\n  &lt;fct&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n1 United States   2021     3291674759.\n2 China           2021     2419607092.\n3 Germany         2021     1353626273.\n4 United Kingdom  2021     1010705115.\n5 Japan           2021      704318189.\n\n# create vector of top 5 countries\ntop_5_exp_2023_vec &lt;- top_5_exp_2023$Partner_Name\n# filter data set to only include top 5 countries\n# also convert export values to billions\ntop_5_exp_df &lt;- world_imp_exp |&gt;\n  filter(Partner_Name %in% top_5_exp_2023_vec) |&gt;\n  mutate(Export_Billion = Export_Thousand / 1000000) |&gt;\n  select(Partner_Name, Year, Export_Billion)\n\nCreate a plot to visualize the top 5 countries with the highest exports in 2021 have changed over time (since 1989).\n\nggplot(data = top_5_exp_df, aes(x = Year, y = Export_Billion, color = Partner_Name)) +\n  geom_line() +\n  labs(title = \"Top 5 Countries with the Highest Exports in 2023\",\n       x = \"Year\",\n       y = \"Export (US$ Billion)\",\n       color = \"Country\") +\n  scale_color_viridis_d() +\n  theme_minimal()\n\n\n\n\nThe plot above shows the top 5 countries with the highest exports in 2021 and how they have changed over time. The United States has the highest exports in 2021, followed by China, Germany, The United Kingdom and Japan. The United States has had the highest exports over time. All countries have increased in exports from 1989 to 2021.\nFilter the data set to find the top 5 countries with the highest imports in 2023, and compare how they have changed over time.\n\ntop_5_imp_2023 &lt;- world_imp_exp |&gt;\n  filter(Year == 2021) |&gt;\n  arrange(desc(Import_Thousand)) |&gt;\n  slice(4, 6, 7, 10, 11) |&gt;\n  select(Partner_Name, Year, Import_Thousand) |&gt;\n  mutate(Partner_Name = fct_reorder(Partner_Name, Import_Thousand))\ntop_5_imp_2023\n\n# A tibble: 5 × 3\n  Partner_Name   Year Import_Thousand\n  &lt;fct&gt;         &lt;dbl&gt;           &lt;dbl&gt;\n1 China          2021     3383435785.\n2 United States  2021     1703893335.\n3 Germany        2021     1538830199.\n4 Japan          2021      850187994.\n5 Korea, Rep.    2021      731208978.\n\n# create vector of top 5 countries\ntop_5_imp_2023_vec &lt;- top_5_imp_2023$Partner_Name\n# filter data set to only include top 5 countries\n# also convert export values to billions\ntop_5_imp_df &lt;- world_imp_exp |&gt;\n  filter(Partner_Name %in% top_5_imp_2023_vec) |&gt;\n  mutate(Import_Billion = Import_Thousand / 1000000) |&gt;\n  select(Partner_Name, Year, Import_Billion)\n\nCreate a plot to visualize the top 5 countries with the highest imports in 2021 have changed over time (since 1989).\n\nggplot(data = top_5_imp_df, aes(x = Year, y = Import_Billion, color = Partner_Name)) +\n  geom_line() +\n  labs(title = \"Top 5 Countries with the Highest Imports in 2021\",\n       x = \"Year\",\n       y = \"Import (US$ Billion)\",\n       color = \"Country\") +\n  scale_color_viridis_d() +\n  theme_minimal()\n\n\n\n\nThe plot above shows the top 5 countries with the highest imports in 2021 and how they have changed over time. The China has the highest imports in 2021, followed by the United States and Germany which are very close together. All countries have seen an increase in imports from 1989 to 2021.\nLoad in world data to create a world map.\n\n# load in data for world map\nworld_df &lt;- map_data(\"world\")\n# change USA in region to United States\nworld_df &lt;- world_df |&gt;\n  mutate(region = ifelse(region == \"USA\", \"United States\", region))\n\nCreate a world map that shows the percent change in exports from 2020 to 2021 for all countries in the data set.\n\n# create df that has percent change in exports from 2020 to 2021 for all countries\nperc_change_exp &lt;- world_imp_exp |&gt;\n  filter(Year == 2020 | Year == 2021) |&gt;\n  group_by(Partner_Name) |&gt;\n  summarise(perc_change = ((last(Export_Thousand) - first(Export_Thousand)) /\n                             first(Export_Thousand)) * 100) |&gt;\n  mutate(perc_change = round(perc_change, 2))\n\n# create plot df that combines world_df with perc_change_exp\nfull_df_exp &lt;- left_join(world_df, perc_change_exp, by = c(\"region\" = \"Partner_Name\"))\n\n# create world map\nggplot(data = full_df_exp, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = perc_change), color = \"black\") +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180)) +\n  scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0) +\n  labs(title = \"Percent Change in Exports from 2020 to 2021\",\n       fill = \"Percent Change\") +\n  theme_minimal()\n\n\n\n\nCountries in gray are not included in the data set. The map shows that most countries have seen a small increase in exports from 2020 to 2021. If I were to have more time, I would like to modify the percent change scale or limit the countries I am looking at to improve the ability to compare different countries, rather than just observing an overall increase across most countries.\nCreate a world map that shows the percent change in imports from 2020 to 2021 for all countries in the data set.\n\n# create df that has percent change in imports from 2020 to 2021 for all countries\nperc_change_imp &lt;- world_imp_exp |&gt;\n  filter(Year == 2020 | Year == 2021) |&gt;\n  group_by(Partner_Name) |&gt;\n  summarise(perc_change = ((last(Import_Thousand) - first(Import_Thousand)) /\n                             first(Import_Thousand)) * 100) |&gt;\n  mutate(perc_change = round(perc_change, 2))\n\n# create plot df that combines world_df with perc_change_imp\nfull_df_imp &lt;- left_join(world_df, perc_change_imp, by = c(\"region\" = \"Partner_Name\"))\n\n# create world map\nggplot(data = full_df_imp, aes(x = long, y = lat, group = group)) +\n  geom_polygon(aes(fill = perc_change), color = \"black\") +\n  coord_map(projection = \"mercator\", xlim = c(-180, 180)) +\n  scale_fill_gradient2(low = \"blue\", mid = \"white\", high = \"red\", midpoint = 0) +\n  labs(title = \"Percent Change in Imports from 2020 to 2021\",\n       fill = \"Percent Change\") +\n  theme_minimal()\n\n\n\n\nCountries in gray are not included in the data set. The map shows that most countries have seen a slight increase in imports from 2020 to 2021. If I were to have more time, I would like to modify the percent change scale or limit the countries I am looking at to improve the ability to compare different countries, rather than just observing an overall increase across most countries, in the same fashion as the map above.\n\n\nConclusion and Wrap-Up\nIn conclusion, the data set I used to analyze the trade of goods between countries from 1989 to 2021 was very interesting. I was able to find the top 5 countries with the highest exports and imports in 2021 and compare how they have changed over time. I was also able to create world maps that show the percent change in exports and imports from 2020 to 2021 for all countries in the data set.\nIf I were to have more time, I would like to modify the percent change scale or limit the countries I am looking at to improve the ability to compare different countries, rather than just observing an overall increase across most countries. I would also like to create world maps that shows the percent changes in exports and imports from 1989 to 2021 for all countries in the data set. This would allow me to see how the trade of goods between countries has changed over time.\n\n\nConnections to Class Ideas\nThis project connects to many of the ideas we have learned in class. I used the mapping features we have learned in class to display the data in a way that is easy to understand. I also used the dplyr package to manipulate the data in a way that made it easier to analyze. I think these visualizations are effective ways of communicating information, but I know that my world maps can be improved upon."
  },
  {
    "objectID": "posts/NBA Shots Visualizations 2022-2023 Season/index.html",
    "href": "posts/NBA Shots Visualizations 2022-2023 Season/index.html",
    "title": "NBA Shots Visualizations 2022-2023 Season",
    "section": "",
    "text": "Introduction\nI am working with some NBA data containing every shot during the 2022-2023 NBA regular season. There are 217,220 observations in this data set, meaning that there were 217,220 shots taken by players in the NBA in this season.\nI am most interested in the variables:\n\nTEAM_NAME: The name of the team that took the shot\nZONE_NAME: The location on the court where the shot was taken\nSHOT_TYPE: The type of shot taken (2PT or 3PT)\nSHOT_MADE: Whether the shot was made (TRUE) or missed (FALSE)\nQUARTER: The quarter in which the shot was taken\nMINS_LEFT: The number of minutes left in the quarter when the shot was taken\n\nData found at DomSamangy’s GitHub (https://github.com/DomSamangy/NBA_Shots_04_23)\nI am going to use this data to create some visualizations to answer the following questions:\n\nHow were teams 3-pt shooting percentages this season from different areas?\nHow clutch were NBA teams this season? Let’s look at shooting percentages across teams in the final 3 minutes of the fourth quarter.\n\n\n\nVisualizations\nLoad in data:\n\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(ggplot2)\ntheme_set(theme_minimal())\nlibrary(here)\nlibrary(plotly)\nnba_22_23 &lt;- read_csv(here(\"data/NBA_2023_Shots.csv\"))\n\nLook at the data:\n\nhead(nba_22_23)\n\n# A tibble: 6 × 26\n  SEASON_1 SEASON_2    TEAM_ID TEAM_NAME    PLAYER_ID PLAYER_NAME POSITION_GROUP\n     &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;         \n1     2023 2022-23  1610612764 Washington …    203078 Bradley Be… G             \n2     2023 2022-23  1610612764 Washington …    204001 Kristaps P… C             \n3     2023 2022-23  1610612764 Washington …   1628420 Monte Morr… G             \n4     2023 2022-23  1610612764 Washington …    204001 Kristaps P… C             \n5     2023 2022-23  1610612764 Washington …   1630166 Deni Avdija F             \n6     2023 2022-23  1610612764 Washington …    204001 Kristaps P… C             \n# ℹ 19 more variables: POSITION &lt;chr&gt;, GAME_DATE &lt;chr&gt;, GAME_ID &lt;dbl&gt;,\n#   HOME_TEAM &lt;chr&gt;, AWAY_TEAM &lt;chr&gt;, EVENT_TYPE &lt;chr&gt;, SHOT_MADE &lt;lgl&gt;,\n#   ACTION_TYPE &lt;chr&gt;, SHOT_TYPE &lt;chr&gt;, BASIC_ZONE &lt;chr&gt;, ZONE_NAME &lt;chr&gt;,\n#   ZONE_ABB &lt;chr&gt;, ZONE_RANGE &lt;chr&gt;, LOC_X &lt;dbl&gt;, LOC_Y &lt;dbl&gt;,\n#   SHOT_DISTANCE &lt;dbl&gt;, QUARTER &lt;dbl&gt;, MINS_LEFT &lt;dbl&gt;, SECS_LEFT &lt;dbl&gt;\n\n\nLet’s look at the top 4 teams from each conference at the end of the 2022-2023 season and visualize their 3-pt shooting percentages from different areas on the court. The top 4 teams from each conference are as follows:\n\nMilwaukee Bucks (East, 1st, 58-24)\nBoston Celtics (East, 2nd, 57-25)\nPhiladelphia 76ers (East, 3rd, 54-28)\nCleveland Cavaliers (East, 4th, 51-31)\nDenver Nuggets (West, 1st, 53-29)\nMemphis Grizzlies (West, 2nd, 51-31)\nSacramento Kings (West, 3rd, 48-34)\nPhoenix Suns (West, 4th, 45-37)\n\n\nnba_3pt_shots &lt;- nba_22_23 |&gt;\n  filter(SHOT_TYPE == \"3PT Field Goal\") |&gt;\n  group_by(TEAM_NAME, ZONE_NAME) |&gt;\n  summarise(shot_perc = mean(SHOT_MADE),\n            total_shots = n(),\n            .groups = \"drop_last\") |&gt;\n  filter(TEAM_NAME == \"Boston Celtics\" | \n           TEAM_NAME == \"Milwaukee Bucks\" | \n           TEAM_NAME == \"Philadelphia 76ers\" | \n           TEAM_NAME == \"Cleveland Cavaliers\" | \n           TEAM_NAME == \"Denver Nuggets\" | \n           TEAM_NAME == \"Memphis Grizzlies\" | \n           TEAM_NAME == \"Sacramento Kings\" | \n           TEAM_NAME == \"Phoenix Suns\")\n\nplot &lt;- ggplot(data = nba_3pt_shots, aes(x = TEAM_NAME, y = shot_perc, \n                                         label = total_shots,\n                                         label2 = shot_perc)) +\n  geom_col(position = \"dodge\", aes(fill = ZONE_NAME)) +\n  coord_flip() +\n  scale_fill_viridis_d() +\n  labs(title = \"3-Point Shooting Percentages by Location\",\n       subtitle = \"Top 4 Conference Teams from 2022-2023 Season\",\n       x = \"Zone\",\n       y = \"Proportion of Shots Made\",\n       fill = \"Court Position\",\n       caption = \"Data from NBA 2022-2023 Season\") +\n  theme_minimal()\n\nggplotly(plot, tooltip = c(\"label\", \"label2\"))\n\n\n\n\n\nBack Court 3-pt % is not very important to all basketball teams as it is not a common shot. The most important 3-pt % is the corner 3-pt %, as it is the shortest 3-pt shot. This can be seen in the visualisation above, as the corner 3-pt % is higher for most teams, whether it be the Left Side or the Right Side.\nLet’s look at shooting percentages across teams in the final 3 minutes of the fourth quarter.\n\nclutch_shots &lt;- nba_22_23 |&gt;\n  filter(QUARTER == 4,\n         MINS_LEFT &lt;= 3) |&gt;\n  group_by(TEAM_NAME, SHOT_MADE) |&gt;\n  summarise(n_shots = n(), .groups = \"drop_last\") |&gt;\n  ungroup() |&gt;\n  pivot_wider(names_from = SHOT_MADE, values_from = n_shots) |&gt;\n  rename(n_made = `TRUE`, n_missed = `FALSE`) |&gt;\n  mutate(n = n_made + n_missed) |&gt;\n  mutate(phat = n_made / n) |&gt;\n  mutate(se = sqrt(phat * (1 - phat) / n),\n         se_lb = phat - se,\n         se_ub = phat + se) |&gt;\n  mutate(TEAM_NAME = fct_reorder(TEAM_NAME, phat))\n\nggplot(data = clutch_shots, aes(x = TEAM_NAME)) +\n  geom_errorbar(aes(ymin = se_lb, ymax = se_ub), col = \"darkgray\") +\n  geom_point(aes(y = phat), col = \"blue\", size = 2) +\n  coord_flip() +\n  labs(title = \"Clutch Shooting in the 4th Quarter\",\n       subtitle = \"Final 3 Minutes\",\n       x = \"Team\",\n       y = \"Proportion of Shots Made\",\n       caption = \"Data from NBA 2022-2023 Regular Season\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe visualization above shows the proportion of shots made by each team in the final 3 minutes of the fourth quarter. The error bars represent the 95% confidence intervals for the proportion of shots made. The confidence intervals are quite wide for most teams, which is expected given the small sample sizes for each team in this situation.\n\n\nConclusion and Wrap-Up\nIn conclusion, the visualizations above show that the corner 3-pt % is the most important 3-pt % for most teams, and that the confidence intervals for the proportion of shots made in the final 3 minutes of the fourth quarter are quite wide for most teams. If I had more time to work on this, I would look into creating heat maps for each team based on location of shots taken and whether they were made or missed. This would give a better understanding of where each team is most successful on the court. In DomSamangy’s GitHub, he has a function that creates a map background and this would be a great thing to apply to visualizations.\n\n\nConnections to Class Ideas\nIn regards to my class Data Visualization, these visualizations are effective ways of communicating information. I chose not to use all NBA teams when looking at 3-pt % by location to avoid the visualization being too cluttered, and allowing the focus to be on the location of the shots. I chose to put the teams on the y-axis and order by the proportion of shots made in the final 3 minutes of the fourth quarter when looking at the “clutchness” of teams. This allows the focus to be on the proportion of shots made, and the error bars show the uncertainty in the proportion of shots made. I also chose to use a blue color for the points and a dark gray color for the error bars to make the visualization easier to read. I also chose to use a minimal theme to make the visualization easier to read. I think these visualizations are effective ways of communicating information."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BenMoolmanBlog",
    "section": "",
    "text": "STAT334 Final Project\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMay 11, 2024\n\n\nBen Moolman\n\n\n\n\n\n\n\n\n\n\n\n\nPro Soccer Analysis 2022-2023 Season\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nBen Moolman and Matthew Maslow\n\n\n\n\n\n\n\n\n\n\n\n\nWorld Import and Export Data\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 23, 2024\n\n\nBen Moolman\n\n\n\n\n\n\n\n\n\n\n\n\nNBA Shots Visualizations 2022-2023 Season\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nBen Moolman\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/STAT334 Final Project/index.html#abstract",
    "href": "posts/STAT334 Final Project/index.html#abstract",
    "title": "STAT334 Final Project",
    "section": "Abstract",
    "text": "Abstract\nIn this project, we aim to explore NCAA basketball teams and their results from the 2023-2024 season. We use data that has various statistics from the 2023-2024 NCAA basketball regular season. We also use data that has predictions made by the public as to how each team will do in the 2024 NCAA tournament. Our goal is to combine these data sets into a shiny app and offer tables and visuals to explore how teams have performed this last season, and how the public thought they would perform in the 2023-2024 NCAA tournament. The code for the shiny app is in the app.R file in the STAT334_final_project repository here."
  },
  {
    "objectID": "posts/STAT334 Final Project/index.html#introduction",
    "href": "posts/STAT334 Final Project/index.html#introduction",
    "title": "STAT334 Final Project",
    "section": "Introduction",
    "text": "Introduction\n\nData\nWe are going to look at two separate datasets in this project.\nThe first is the “College Basketball Dataset” from Kaggle by Andrew Sundberg, which contains data from various seasons of Division 1 college basketball. At the time of this writing, the csv contains data from the 2023-2024 regular season without any data from the NCAA tournament this year. We are going to be using the cbb24.csv for our analysis, as it contains data on all Division 1 NCAA college basketball teams for the 2023-2024 regular season. The link to the Kaggle dataset can be found here. Variables from this dataset are:\n\nRK: The ranking of the team at the end of the regular season according to barttorvik\nTEAM: The name of the team\nCONF: The conference the team is in\nG: The number of games the team played in the regular season\nW: The number of wins the team had in the regular season\nADJOE: Adjusted offensive efficeincy (points scored per 100 possessions vs avg D1 defense)\nADJDE: Adjusted defensive efficiency (points allowed per 100 possessions vs avg D1 offense)\nBARTHAG: Power rating from barttorvik (chance of beating avg D1 team)\nEFG_O: Effective field goal percentage shot\nEFG_D: Effective field goal percentage allowed\nTOR: Turnover percentage allowed (turnovers per 100 plays)\nTORD: Turnover percentage forced (turnovers per 100 plays)\nORB: Offensive rebound percentage\nDRB: Defensive rebound percentage\nFTR: Free throw rate\nFTRD: Free throw rate allowed\n2P_O: Two point percentage shot\n2P_D: Two point percentage allowed\n3P_O: Three point percentage shot\n3P_D: Three point percentage allowed\nADJ_T: Adjusted tempo (possessions per 40 minutes)\nSEED: The seed the team was given in the 2024 NCAA tournament\n\n\n# load in data\nlibrary(readr)\nlibrary(here)\ncbb24 &lt;- read_csv(here(\"data/cbb24.csv\"))\nlibrary(tidyverse)\n# let's add a win percentage variable to cbb24\ncbb24 &lt;- cbb24 |&gt; mutate(win_perc = W / G * 100)\n\nLet’s look at what the four 1 seeds in the tournament’s rows look like in the cbb24 dataset.\n\n\n\n\n\n\nRK\nTEAM\nCONF\nG\nW\nADJOE\nADJDE\nBARTHAG\nEFG%\nEFGD%\nTOR\nTORD\nORB\n\n\n\n\n1\nHouston\nB12\n34\n30\n119.2\n85.5\n0.9785\n49.7\n44.0\n13.7\n24.7\n36.9\n\n\n2\nConnecticut\nBE\n34\n31\n127.1\n93.6\n0.9712\n57.1\n45.1\n14.9\n16.2\n36.5\n\n\n3\nPurdue\nB10\n33\n29\n126.2\n94.7\n0.9644\n56.0\n47.7\n16.5\n14.0\n37.4\n\n\n9\nNorth Carolina\nACC\n34\n27\n116.8\n93.2\n0.9305\n51.3\n46.4\n14.4\n14.9\n32.8\n\n\n\n\n\n\n\n\n\n\n\n\nDRB\nFTR\nFTRD\n2P_O\n2P_D\n3P_O\n3P_D\nADJ_T\nWAB\nSEED\nwin_perc\n\n\n\n\n30.2\n29.9\n39.0\n48.4\n43.4\n34.7\n30.0\n63.3\n10.6\n1\n88.23529\n\n\n26.8\n33.3\n32.5\n58.5\n43.7\n36.7\n31.9\n64.6\n11.3\n1\n91.17647\n\n\n24.7\n42.8\n23.0\n53.2\n48.1\n40.8\n31.4\n67.6\n11.0\n1\n87.87879\n\n\n23.5\n36.8\n28.3\n50.3\n46.0\n35.4\n31.4\n70.4\n6.6\n1\n79.41176\n\n\n\n\n\n\n\n\nOur second dataset is taken from Github’s tidytuesday, and is from Nishaan Amin’s Kaggle dataset and analysis linked here. The tidytuesday task specified two of Nishaan Amin’s many datasets, and the link to the Github site can be found here. These two dataframes contain data on past team results and the predictions the public has for this year’s tournament (year 2024). The datasets are titled team-results and public-picks. For this project, we will only be looking at the public-picks data. Variables from this dataset are:\n\nYEAR: The year of the NCAA tournament\nTEAMNO: The team number\nTEAM: The name of the team\nR64: The percentage of the public that picked the team win in the Round of 64\nR32: The percentage of the public that picked the team win in the Round of 32\nS16: The percentage of the public that picked the team win in the Sweet 16\nE8: The percentage of the public that picked the team win in the Elite 8\nF4: The percentage of the public that picked the team win in the Final Four\nFINALS: The percentage of the public that picked the team win in the Finals\n\n\n# load in data\nlibrary(tidytuesdayR)\ntuesdata &lt;- tidytuesdayR::tt_load('2024-03-26')\n\n\n    Downloading file 1 of 2: `team-results.csv`\n    Downloading file 2 of 2: `public-picks.csv`\n\npublic_picks &lt;- tuesdata$'public-picks'\n\nLet’s look at the rows of the public_picks dataset that contain the four 1 seeds in the tournament.\n\n\n\n\n\n\nYEAR\nTEAMNO\nTEAM\nR64\nR32\nS16\nE8\nF4\nFINALS\n\n\n\n\n2024\n1067\nConnecticut\n98.41%\n93.59%\n80.22%\n66.20%\n50.27%\n34.92%\n\n\n2024\n1056\nHouston\n97.01%\n85.69%\n63.77%\n42.54%\n16.15%\n9.27%\n\n\n2024\n1038\nNorth Carolina\n97.55%\n88.07%\n71.16%\n45.40%\n29.98%\n12.10%\n\n\n2024\n1033\nPurdue\n97.08%\n86.21%\n66.25%\n44.36%\n21.64%\n10.22%\n\n\n\n\n\n\n\n\n\n\nGoals\nOur goal is to create a shiny app that allow users to explore the data from the 2023-2024 NCAA basketball season. We offer tables and visuals that allow users to see how teams performed in the regular season, and how the public thought they would perform in the 2024 NCAA tournament.\nWe are trying to answer the question of what can guide a team to having a successful regular season, and how that success translates to the NCAA tournament. We look at various statistics from the regular season data to see if there are any trends that can be seen in the data. We also look at the public picks data to see if there are any trends in the data that can be seen. We can see if there are any specific statistics or groupings of statistics that the public tends to pick more often than others."
  },
  {
    "objectID": "posts/STAT334 Final Project/index.html#visualizations",
    "href": "posts/STAT334 Final Project/index.html#visualizations",
    "title": "STAT334 Final Project",
    "section": "Visualizations",
    "text": "Visualizations\nFirst, we do some cleaning of the data to make it easier to work with. We are going to be looking at the tables and graphs generated in the shiny app. The code below generating all visualizations is static and will not be run in the shiny app. It is only here to show the visualizations that will be in the shiny app.\n\nlibrary(tidyverse)\nlibrary(shiny)\n\n## let's add a win percentage variable to cbb24\ncbb24 &lt;- cbb24 |&gt; mutate(win_perc = W / G * 100)\n\n## Let's convert the percentages to numeric in public picks\npublic_picks[, c(\"R64\", \"R32\", \"S16\", \"E8\", \"F4\", \"FINALS\")] &lt;- \n  lapply(public_picks[, c(\"R64\", \"R32\", \"S16\", \"E8\", \"F4\", \"FINALS\")], \n         function(x) as.numeric(sub(\"%\", \"\", x)))\n\n\nRegular Season Statistics Plot\n\n## Visualization 1: cbb24 filtered for specific teams and specific stats\ncbb24_top_teams &lt;- cbb24 |&gt; \n  filter(TEAM %in% c(\"Houston\", \"Connecticut\", \"Purdue\", \"North Carolina\")) |&gt;\n  select(TEAM, win_perc, '2P_O', '2P_D', '3P_O', '3P_D')\n\ncbb24_top_teams_long &lt;- pivot_longer(cbb24_top_teams, \n                                     cols = -TEAM, \n                                     names_to = \"Variable\", \n                                     values_to = \"Value\")\n\nggplot(cbb24_top_teams_long, aes(x = Variable, y = Value, fill = TEAM)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Variable\", y = \"Value\",\n       title = \"Performance Comparison of Top College Basketball Teams\",\n       subtitle = \"Data from 2023-2024 NCAA Basketball Regular Season\") +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nThis visual shows the performance of college basketball teams in the 2023-2024 regular season. We have selected the 4 teams that have been given the 1 seed in the tournament, Houston, Connecticut, Purdue, and North Carolina. We can see how these 4 teams compare in various statistics. Statistics we have chosen here are 2-point field goal percentage allowed (2P_D), offensive 2-point field goal percentage (2P_O), 3-point field goal percentage allowed (3P_D), offensive 3-point field goal percentage (3P_O), and win percentage (win_perc). The shiny app allows users to change what teams and statistics they want to see in this visual.\n\n\nRegular Season Statistics Table\n\ncbb24_top_teams |&gt;\n  arrange(desc(win_perc)) |&gt;\n  kable() |&gt;\n  kable_styling(full_width = FALSE,\n                font_size = 23)\n\n\n\n\n\nTEAM\nwin_perc\n2P_O\n2P_D\n3P_O\n3P_D\n\n\n\n\nConnecticut\n91.17647\n58.5\n43.7\n36.7\n31.9\n\n\nHouston\n88.23529\n48.4\n43.4\n34.7\n30.0\n\n\nPurdue\n87.87879\n53.2\n48.1\n40.8\n31.4\n\n\nNorth Carolina\n79.41176\n50.3\n46.0\n35.4\n31.4\n\n\n\n\n\n\n\n\nThe table shows the performance of college basketball teams in the 2023-2024 regular season. This table accompanies the graph above, and provides numerical values for the statistics shown in the graph.\n\n\nPublic Picks Plot\n\nrounds_order &lt;- c(\"R64\", \"R32\", \"S16\", \"E8\", \"F4\", \"FINALS\")\n\npublic_picks_top_teams &lt;- public_picks |&gt; \n  filter(TEAM %in% c(\"Houston\", \"Connecticut\", \"Purdue\", \"North Carolina\")) |&gt;\n  select(TEAM, S16, E8, F4, FINALS)\n\npublic_picks_top_teams_long &lt;- pivot_longer(public_picks_top_teams, \n                                     cols = -TEAM, \n                                     names_to = \"Round\", \n                                     values_to = \"Percentage\")\n\npublic_picks_top_teams_long$Round &lt;- factor(public_picks_top_teams_long$Round, \n                                            levels = rounds_order)\n\nggplot(public_picks_top_teams_long, \n       aes(x = Round, y = Percentage, fill = TEAM)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Round\", y = \"Percentage\",\n       title = \"Public Picks for 2024 NCAA Tournament Teams\") +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_viridis_d()\n\n\n\n\n\n\n\n\nThis visual shows the public picks for the 2024 NCAA tournament. Users of the shiny app can see how the public thinks different teams will perform in the tournament. Again, we have selected the 4 teams that have been given the 1 seed in the tournament, Houston, Connecticut, Purdue, and North Carolina, and can explore the public picks. The shiny app allows users to change what teams they want to see in this visual, by modifying the teams selected and what rounds they want to see.\n\n\nPublic Picks Table\n\npublic_picks_top_teams |&gt;\n  arrange(desc(FINALS)) |&gt;\n  kable() |&gt;\n  kable_styling(full_width = FALSE,\n                font_size = 23)\n\n\n\n\n\nTEAM\nS16\nE8\nF4\nFINALS\n\n\n\n\nConnecticut\n80.22\n66.20\n50.27\n34.92\n\n\nNorth Carolina\n71.16\n45.40\n29.98\n12.10\n\n\nPurdue\n66.25\n44.36\n21.64\n10.22\n\n\nHouston\n63.77\n42.54\n16.15\n9.27\n\n\n\n\n\n\n\n\nThe table shows the public picks for the 2024 NCAA tournament. This table accompanies the graph above, and provides numerical values for the percentages shown in the graph."
  },
  {
    "objectID": "posts/STAT334 Final Project/index.html#conclusion",
    "href": "posts/STAT334 Final Project/index.html#conclusion",
    "title": "STAT334 Final Project",
    "section": "Conclusion",
    "text": "Conclusion\nIn conclusion, we have built a shiny app that allows users to explore the data from the 2023-2024 NCAA basketball season. We have provided tables and visuals that allow users to see how teams performed in the regular season, and how the public thought they would perform in the 2024 NCAA tournament. We can look at various statistics from the regular season data to see if there are any trends that can be seen in the data. We can also looked at the public picks data to see if there are any trends in the data that can be seen. We can see if there are any specific statistics or groupings of statistics that the public tends to pick more often than others.\nWe hope that this shiny app will be useful for anyone interested in exploring the data from the 2023-2024 NCAA basketball season, and can be easily adapted to explore other seasons of NCAA basketball.\nIf given more time, we would like to add more features to the shiny app. We would like to add another section of exploring data using the second tidytuesday dataset, team-results, that includes data on previous years of March Madness Tournament Data. We would like to add more visuals and tables that allow users to explore this data. And now that the tournament has completed, it would be interesting to see how the public picks compared to the actual results of the tournament."
  }
]